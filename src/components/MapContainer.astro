<div id="map"></div>

<script>
  import L from 'leaflet';
  import organizationsData from '../data/organizations.json';

  // District colors
  const districtColors = {
    '1st District- Hilda Solis': '#E53E3E',
    '2nd District- Holly Mitchell': '#3182CE',
    '3rd District- Lindsey Horvath': '#38A169',
    '4th District- Janice Hahn': '#805AD5',
    '5th District- Kathryn Barger': '#DD6B20',
    'Countywide': '#4A5568'
  };

  // GeoJSON district colors for boundaries
  const geojsonColors = {
    '1': '#E53E3E',
    '2': '#3182CE',
    '3': '#38A169',
    '4': '#805AD5',
    '5': '#DD6B20'
  };

  // Initialize map with mobile-friendly options
  const map = L.map('map', {
    center: [34.0522, -118.2437],
    zoom: 10,
    zoomControl: true,
    attributionControl: true,
    // Mobile-friendly options
    tap: true,
    touchZoom: true,
    dragging: true,
    scrollWheelZoom: true,
    doubleClickZoom: true,
    boxZoom: true,
    keyboard: true,
    zoomSnap: 0.5,
    zoomDelta: 0.5,
    wheelPxPerZoomLevel: 60,
    maxZoom: 18,
    minZoom: 8
  });

  // Adjust initial zoom for mobile
  if (window.innerWidth <= 768) {
    map.setView([34.0522, -118.2437], 9);
  }
  if (window.innerWidth <= 480) {
    map.setView([34.0522, -118.2437], 8);
  }

  // Handle window resize
  window.addEventListener('resize', () => {
    setTimeout(() => {
      map.invalidateSize();
    }, 100);
  });

  // Add base layer
  L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
    subdomains: 'abcd',
    maxZoom: 18
  }).addTo(map);

  // Add district boundaries
  const geojsonUrl = '/Supervisorial_Districts.geojson';
  
  fetch(geojsonUrl)
    .then(response => response.json())
    .then(data => {
      L.geoJSON(data, {
        style: function(feature) {
          const district = feature.properties.DISTRICT;
          return {
            fillColor: geojsonColors[district] || '#00000000',
            color: '#000000',
            weight: 2,
            fillOpacity: 0.3
          };
        },
        onEachFeature: function(feature, layer) {
          layer.bindTooltip(`District ${feature.properties.DISTRICT}`, {
            permanent: false,
            direction: 'center'
          });
        }
      }).addTo(map);
    })
    .catch(error => {
      console.error('Error loading district boundaries:', error);
    });

  // Store all markers for filtering
  let allMarkers = [];

  // Add organization markers
  organizationsData.organizations.forEach(org => {
    const [lat, lng] = org.coordinates;
    const color = districtColors[org.primaryDistrict] || '#718096';
    
    // Create popup content
    const popupContent = `
      <div class="popup-content">
        <h3 style="margin: 0 0 10px 0; color: ${color};">${org.name}</h3>
        <p><strong>Sector:</strong> ${org.sector}</p>
        <p><strong>District:</strong> ${org.primaryDistrict}</p>
        <p><strong>Address:</strong> ${org.address}</p>
        ${org.mission ? `<p><strong>Mission:</strong> ${org.mission}</p>` : ''}
        ${org.primaryActivity ? `<p><strong>Activity:</strong> ${org.primaryActivity}</p>` : ''}
        ${org.contact.email ? `<p><strong>Contact:</strong> <a href="mailto:${org.contact.email}">${org.contact.email}</a></p>` : ''}
      </div>
    `;

    // Create marker with mobile-friendly options
    const markerSize = window.innerWidth <= 480 ? 18 : 20;
    const marker = L.marker([lat, lng], {
      icon: L.divIcon({
        className: 'custom-marker',
        html: `<div style="background-color: ${color}; width: ${markerSize}px; height: ${markerSize}px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 5px rgba(0,0,0,0.3);"></div>`,
        iconSize: [markerSize, markerSize],
        iconAnchor: [markerSize/2, markerSize/2]
      }),
      title: org.name
    }).bindPopup(popupContent, { 
      maxWidth: window.innerWidth <= 480 ? 250 : window.innerWidth <= 768 ? 280 : 400,
      autoPan: true,
      autoPanPadding: [20, 20],
      closeButton: true,
      autoClose: true,
      closeOnEscapeKey: true
    });

    // Add searchable properties to marker
    marker.orgData = org;
    marker.addTo(map);
    allMarkers.push(marker);
  });

  // Export for use by search functionality
  window.mapInstance = map;
  window.allMarkers = allMarkers;
  window.districtColors = districtColors;
</script>

<style>
  #map {
    height: 70vh;
    width: 100%;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    min-height: 400px;
  }

  :global(.popup-content) {
    max-height: 300px;
    overflow-y: auto;
  }

  :global(.popup-content h3) {
    font-size: 1.1em;
    font-weight: bold;
  }

  :global(.popup-content p) {
    margin: 8px 0;
    font-size: 0.9em;
    line-height: 1.4;
  }

  :global(.custom-marker) {
    background: transparent !important;
    border: none !important;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    #map {
      height: 50vh;
      min-height: 300px;
      border-radius: 6px;
    }
    
    :global(.popup-content) {
      max-height: 250px;
      max-width: 280px;
    }
    
    :global(.popup-content h3) {
      font-size: 1em;
    }
    
    :global(.popup-content p) {
      font-size: 0.85em;
      margin: 6px 0;
    }
    
    :global(.leaflet-popup-content-wrapper) {
      border-radius: 6px;
    }
  }

  @media (max-width: 480px) {
    #map {
      height: 45vh;
      min-height: 280px;
    }
    
    :global(.popup-content) {
      max-height: 200px;
      max-width: 250px;
    }
    
    :global(.popup-content h3) {
      font-size: 0.9em;
    }
    
    :global(.popup-content p) {
      font-size: 0.8em;
      margin: 4px 0;
    }
  }
</style>
